#loading packages
pacman::p_load(ggplot2, tidyverse)
# Loading files from google drive
id_2014 <- "1Nes6x0xB-M2tnPu4DA0AJbD0hVuiXDc4" # google file ID - hbsc 2014
hbsc2014<- read.csv(sprintf("https://docs.google.com/uc?id=%s&export=download", id_2014)) # data hbsc 2014
id_2010 <- "1HQ-nJVChpRXWwWEwumE1yOcPsGDtUDNU" # google file ID - hbsc 2010
hbsc2010<- read.csv(sprintf("https://docs.google.com/uc?id=%s&export=download", id_2010)) # data hbsc 2010
id_2006 <- "1PXtYqpDvnO0YQ774623NiRZY38te8oes" # google file ID - hbsc 2006
hbsc2006<- read.csv(sprintf("https://docs.google.com/uc?id=%s&export=download", id_2006)) # data hbsc 2006
id_2001 <- "1c8toBLgCl5BLy6yGUkDlpK_XK0i1E5pV" # google file ID - hbsc 2001
hbsc2001<- read.csv(sprintf("https://docs.google.com/uc?id=%s&export=download", id_2001)) # data hbsc 2001
ls.str(hbsc2001)
ls.str(hbsc2014)
View(hbsc2010)
head(hbsc2014$breakfastwd) #breakfast weekdays
head(hbsc2014$breakfastwe) #breakfast weekends
head(hbsc2014$fruits) # eat fruits
head(hbsc2014$vegetables) #eat vegetables
head(hbsc2014$sweets) #eat sweets
head(hbsc2014$softdrinks) #drink coke/soft drinks
head(hbsc2014$m11) #family meal breakfast
head(hbsc2014$m12) #family meal evening
head(hbsc2014$ondiet) #on a diet
head(hbsc2014$toothbr) #tooth brushing
hbsc2014$COUNTRYno <- (ifelse(hbsc2014$COUNTRYno == "8000","Albania", ifelse(hbsc2014$COUNTRYno == "40000", "Austria", ifelse(hbsc2014$COUNTRYno == "51000","Armenia", ifelse(hbsc2014$COUNTRYno == "8000","Albania", ifelse(hbsc2014$COUNTRYno == "56001","Belgium (Flemish)", ifelse(hbsc2014$COUNTRYno == "56002","Belgium (French)", ifelse(hbsc2014$COUNTRYno == "100000","Bulgaria", ifelse(hbsc2014$COUNTRYno == "124000","Canada", ifelse(hbsc2014$COUNTRYno == "191000","Croatia",ifelse(hbsc2014$COUNTRYno == "203000","Czech Republic",ifelse(hbsc2014$COUNTRYno == "208000","Denmark",ifelse(hbsc2014$COUNTRYno == "233000","Estonia",ifelse(hbsc2014$COUNTRYno == "246000","Finland",ifelse(hbsc2014$COUNTRYno == "250000","France",ifelse(hbsc2014$COUNTRYno == "276000","Germany",ifelse(hbsc2014$COUNTRYno == "300000","Greece",ifelse(hbsc2014$COUNTRYno == "304000","Greenland",ifelse(hbsc2014$COUNTRYno == "348000","Hungary",ifelse(hbsc2014$COUNTRYno == "352000","Iceland",ifelse(hbsc2014$COUNTRYno == "372000","Ireland",ifelse(hbsc2014$COUNTRYno == "376000","Israel",ifelse(hbsc2014$COUNTRYno == "380000","Italy",ifelse(hbsc2014$COUNTRYno == "428000","Latvia",ifelse(hbsc2014$COUNTRYno == "440000","Lithuania",ifelse(hbsc2014$COUNTRYno == "442000","Luxembourg",ifelse(hbsc2014$COUNTRYno == "470000","Malta",ifelse(hbsc2014$COUNTRYno == "498000","Republic of Moldova",ifelse(hbsc2014$COUNTRYno == "528000","Netherlands",ifelse(hbsc2014$COUNTRYno == "578000","Norway",ifelse(hbsc2014$COUNTRYno == "616000","Poland",ifelse(hbsc2014$COUNTRYno == "620000","Portugal",ifelse(hbsc2014$COUNTRYno == "642000","Romania",ifelse(hbsc2014$COUNTRYno == "643000","Russia",ifelse(hbsc2014$COUNTRYno == "703000","Slovakia",ifelse(hbsc2014$COUNTRYno == "705000","Slovenia",ifelse(hbsc2014$COUNTRYno == "724000","Spain",ifelse(hbsc2014$COUNTRYno == "752000","Sweden",ifelse(hbsc2014$COUNTRYno == "756000","Switzerland",ifelse(hbsc2014$COUNTRYno == "792000","Turkey",ifelse(hbsc2014$COUNTRYno == "804000","Ukraine",ifelse(hbsc2014$COUNTRYno == "807000","Macedonia",ifelse(hbsc2014$COUNTRYno == "826001","England",ifelse(hbsc2014$COUNTRYno == "826002","Scotland",ifelse(hbsc2014$COUNTRYno == "826003","Wales",ifelse(hbsc2014$COUNTRYno == "840000","USA", NA))))))))))))))))))))))))))))))))))))))))))))))
View(hbsc2014)
head(hbsc2014$agesex)
length(which(!is.na(hbsc2014$agesex))) #only 13417 answers
head(hbsc2014$thinkbody) #think about body
head(hbsc2014$headache) #headache
head(hbsc2014$stomachache) #stomachache
head(hbsc2014$backache) #backache
head(hbsc2014$feellow) #feeling low
head(hbsc2014$irritable) #irritability or bad temper
head(hbsc2014$nervous) #feeling nervous
head(hbsc2014$sleepdifficulty) #difficulties in sleeping
head(hbsc2014$dizzy) # feeling dizzy
head(hbsc2014$health) #health
head(hbsc2014$lifesat) #life satisfaction
hist(hbsc2014$lifesat)
length(which(!is.na(hbsc2014$lifesat))) #205953 responses, ~ 8000 NA's
#Quick try
new <- hbsc2014 %>%
filter(COUNTRYno == c("Denmark", "Sweden", "Norway", "Finland"))
scandinavian_model <- glm(lifesat ~ sleepdificulty + nervous + irritable +thinkbody+ dizzy + health +feellow+headache +stomachache+ backache, data= new)
summary(scandinavian_model)
#loading packages
pacman::p_load(ggplot2, tidyverse)
#quick plot
ggplot(data = hbsc2014, aes(x= sex, y=drunk, colour = COUNTRYno ))+ geom_histogram(stat="identity")+
facet_wrap(~COUNTRYno)+
labs(x = "x", y = "y")+
ggtitle("Per country")+
theme_minimal()
#quick plot
ggplot(hbsc2014, aes(softdrinks, colour = COUNTRYno)) +
geom_histogram(aes(y = ..density..)) + stat_function(fun = dnorm, args = list(mean = mean(df$balloon),
sd = sd(hbsc2014$softdrinks)), colour = "red", size = 1) + theme_bw()+
facet_wrap(~COUNTRYno)+
labs(x = "Softdrinks", y = "y")+
ggtitle("Softdrink consumption per country")+
theme_minimal()
ggplot(hbsc2014, aes(lifesat, colour = COUNTRYno)) +
geom_histogram(aes(y = ..density..)) + stat_function(fun = dnorm, args = list(mean = mean(df$balloon),
sd = sd(hbsc2014$softdrinks)), colour = "red", size = 1) + theme_bw()+
facet_wrap(~COUNTRYno)+
labs(x = "Softdrinks", y = "y")+
ggtitle("Life satisfaction score per country")+
theme_minimal()
#loading packages
pacman::p_load(ggplot2, tidyverse)
#quick plot
ggplot(hbsc2014, aes(softdrinks, colour = COUNTRYno)) +
geom_histogram(aes(y = ..density..)) + stat_function(fun = dnorm, args = list(mean = mean(df$balloon),
sd = sd(hbsc2014$softdrinks)), colour = "red", size = 1) + theme_bw()+
facet_wrap(~COUNTRYno)+
labs(x = "Softdrinks", y = "y")+
ggtitle("Softdrink consumption per country")+
theme_minimal()
#loading packages
pacman::p_load(ggplot2, tidyverse)
#quick plot
ggplot(data = hbsc2014, aes(x= sex, y=drunk, colour = COUNTRYno ))+ geom_histogram(stat="identity")+
facet_wrap(~COUNTRYno)+
labs(x = "x", y = "y")+
ggtitle("Per country")+
theme_minimal()
#quick plot
ggplot(hbsc2014, aes(softdrinks, colour = COUNTRYno)) +
geom_histogram(aes(y = ..density..)) + stat_function(fun = dnorm, args = list(mean = mean(df$balloon),
sd = sd(hbsc2014$softdrinks)), colour = "red", size = 1) + theme_bw()+
facet_wrap(~COUNTRYno)+
labs(x = "Softdrinks", y = "y")+
ggtitle("Softdrink consumption per country")+
theme_minimal()
#install.packages("gganimate")
#install.packages("gifski")
#install.packages("av")
#install.packages("gapminder")
library(gganimate)
library(gifski)
library(gapminder)
library(tidyverse)
#library(av)
str(gapminder)
unique(gapminder$year)
head(gapminder)
gapminder$lifeExp
theme_set(theme_bw())  # set theme to white background for better visibility
ggplot(subset(gapminder, year == 1952), aes(gdpPercap, lifeExp, size = pop)) +
geom_point() +
scale_x_log10()
theme_set(theme_bw())  # set theme to white background for better visibility
ggplot(subset(gapminder, year == 1952), aes(gdpPercap, lifeExp, size = pop, label = country)) +
geom_point() +
geom_text(hjust=0, vjust=0) +
scale_x_log10()
dat1952 <- gapminder %>%
filter(year == "1952") %>%
mutate(country = as.character(country))
target_outlier <- dat1952$country[(which.max(dat1952$gdpPercap))]
target_outlier
ggplot(subset(gapminder, year == 2007), aes(gdpPercap, lifeExp, size = pop, label = country)) +
geom_point() +
geom_text(hjust=0, vjust=0) +
scale_x_log10()
options(scipen=10000) ### to make it non-scientific notation and thus more legible
ggplot(subset(gapminder, year == 2007), aes(gdpPercap, lifeExp, size = pop, label = country, colour = continent)) +
geom_point() +
geom_text(hjust=0, vjust=0)+
scale_x_log10()+
labs(subtitle = "The Life Expentancy of the World Citizens when Modelled by GDP per Capita ", x = "GDP per capita on the log10 scale", y = "Life expectancy of the citisens")
#### first lets find the three highest values
datGDP <- gapminder %>%
filter(year == "2007") %>%
select(gdpPercap)
top_three <- datGDP%>%
top_n(3)
#### lets then find out which country holds these values:
#### first I filter the data so we are working with all variables, but only from 2007
dat2007 <- gapminder %>%
filter(year == "2007") %>%
mutate(country = as.character(country))
#### then lets find the three richest:
richest <- dat2007$country[which(grepl(top_three[1,1], dat2007$gdpPercap))]
second_richest <- dat2007$country[which(grepl(top_three[2,1], dat2007$gdpPercap))]
third_richest <- dat2007$country[which(grepl(top_three[3,1], dat2007$gdpPercap))]
### so the three richest countries is:
richest
second_richest
third_richest
View(hbsc2014)
pairs(hbsc2014)
?apply
#### first we create the array matrix
z <- hbsc2014[,-c(1,1)]
View(z)
means <- apply(z,2,mean)
means
sds <- apply(z,2,sd)
View(new)
hbsc2014$COUNTRYno
unique(hbsc2014$COUNTRYno)
#select a subset of the variables
vari_subset<- hbsc2014[,c("lifesat", "ondiet")]
#let's compute the 3 clusters
km <- kmeans(vari_subset, centers = 3)
#select a subset of the variables
clean_2014 <- hbsc2014 %>%
drop_na(c("lifesat", "ondiet"))
vari_subset<- clean_2014[,c("lifesat", "ondiet")]
#let's compute the 3 clusters
km <- kmeans(vari_subset, centers = 3)
km
library(factoextra)
fviz_cluster(km, data = clean_2014, label=NA)+theme_bw()
#select a subset of the variables
clean_2014 <- hbsc2014 %>%
drop_na(c("lifesat", "ondiet")) %>%
mutate(lifesat <- as.numeric(lifesat))
vari_subset<- clean_2014[,c("lifesat", "ondiet")]
#let's compute the 3 clusters
km <- kmeans(vari_subset, centers = 3)
km
fviz_cluster(km, data = clean_2014, label=NA)+theme_bw()
#select a subset of the variables
clean_2014 <- hbsc2014 %>%
drop_na(c("lifesat", "ondiet")) %>%
mutate(lifesat <- as.numeric(lifesat),
ondiet <- as.numeric(ondiet))
vari_subset<- clean_2014[,c("lifesat", "ondiet")]
#let's compute the 3 clusters
km <- kmeans(vari_subset, centers = 3)
km
library(factoextra)
fviz_cluster(km, data = clean_2014, label=NA)+theme_bw()
class(clean_2014$ondiet)
?mutate
#select a subset of the variables
clean_2014 <- hbsc2014 %>%
drop_na(c("lifesat", "ondiet")) %>%
mutate(lifesat = as.numeric(lifesat),
ondiet = as.numeric(ondiet))
class(clean_2014$ondiet)
fviz_cluster(km, data = clean_2014, label=NA)+theme_bw()
#select a subset of the variables
clean_2014 <- hbsc2014 %>%
drop_na(c("lifesat", "ondiet")) %>%
mutate(lifesat = as.numeric(lifesat)) %>%
mutate(ondiet = as.numeric(ondiet))
vari_subset<- clean_2014[,c("lifesat", "ondiet")]
#let's compute the 3 clusters
km <- kmeans(vari_subset, centers = 3)
km
fviz_cluster(km, data = clean_2014, label=NA)+theme_bw()
#select a subset of the variables
clean_2014 <- hbsc2014 %>%
select(lifesat, ondiet)
#select a subset of the variables
clean_2014 <- hbsc2014 %>%
select(lifesat, ondiet) %>%
drop_na(c("lifesat", "ondiet")) %>%
mutate(lifesat = as.numeric(lifesat)) %>%
mutate(ondiet = as.numeric(ondiet))
vari_subset<- clean_2014[,c("lifesat", "ondiet")]
#let's compute the 3 clusters
km <- kmeans(vari_subset, centers = 3)
km
fviz_cluster(km, data = clean_2014, label=NA)+theme_bw()
View(clean_2014)
#select a subset of the variables
clean_2014 <- hbsc2014 %>%
select(lifesat, ondiet, COUNTRYno) %>%
drop_na(c("lifesat", "ondiet")) %>%
mutate(lifesat = as.numeric(lifesat)) %>%
mutate(ondiet = as.numeric(ondiet))
vari_subset<- clean_2014[,c("lifesat", "ondiet")]
#let's compute the 3 clusters
km <- kmeans(vari_subset, centers = 3)
?fviz_cluster
fviz_cluster(km, data = clean_2014, label=COUNTRYno)+theme_bw()
#select a subset of the variables
clean_2014 <- hbsc2014 %>%
select(lifesat, ondiet, COUNTRYno) %>%
drop_na(c("lifesat", "ondiet")) %>%
mutate(lifesat = as.numeric(lifesat)) %>%
mutate(ondiet = as.numeric(ondiet)) %>%
mutate(country_number = as.numeric(as.integer(COUNTRYno)))
#select a subset of the variables
clean_2014 <- hbsc2014 %>%
select(lifesat, ondiet, COUNTRYno) %>%
drop_na(c("lifesat", "ondiet", "COUNTRYno")) %>%
mutate(lifesat = as.numeric(lifesat)) %>%
mutate(ondiet = as.numeric(ondiet)) %>%
mutate(country_number = as.numeric(as.integer(COUNTRYno)))
View(clean_2014)
#select a subset of the variables
clean_2014 <- hbsc2014 %>%
select(lifesat, ondiet, COUNTRYno) %>%
drop_na(c("lifesat", "ondiet", "COUNTRYno")) %>%
mutate(lifesat = as.numeric(lifesat)) %>%
mutate(ondiet = as.numeric(ondiet)) %>%
mutate(country_number = as.numeric(as.factor(COUNTRYno)))
View(clean_2014)
unique(clean_2014$country_number)
#select a subset of the variables
clean_2014 <- hbsc2014 %>%
drop_na(c("lifesat", "ondiet", "COUNTRYno")) %>%
mutate(lifesat = as.numeric(lifesat)) %>%
mutate(ondiet = as.numeric(ondiet)) %>%
mutate(country_number = as.numeric(as.factor(COUNTRYno))) %>%
select(lifesat, ondiet, country_number)
vari_subset<- clean_2014[,c("lifesat", "ondiet")]
#let's compute the 3 clusters
km <- kmeans(vari_subset, centers = 3)
km
fviz_cluster(km, data = clean_2014, label=COUNTRYno)+theme_bw()
fviz_cluster(km, data = clean_2014, label= country_number)+theme_bw()
fviz_cluster(km, data = clean_2014, label= "country_number")+theme_bw()
fviz_cluster(km, data = clean_2014, label= NULL)+theme_bw()
data("iris")
head(iris)
# Remove species column (5) and scale the data
iris.scaled <- scale(iris[, -5])
iris.scaled
head(iris.scaled)
#### lets do the selection of columns and scaling for ours:
#select a subset of the variables
cluster_dat <- hbsc2014 %>%
drop_na(c("sweets", "ondiet", "vegetables", "fruits","COUNTRYno")) %>%
mutate(country_number = as.numeric(as.factor(COUNTRYno))) %>%
select(sweets, ondiet, country_number, vegetables, fruits)
View(cluster_dat)
### lets now scale it:
cluster_dat_scaled <- scale(cluster_dat[, -5]) # also -5 since 5 columns
head(cluster_dat_scaled)
View(cluster_dat_scaled)
### lets now scale it:
cluster_dat_scaled <- scale(cluster_dat[, -6]) # also -5 since 5 columns
head(cluster_dat_scaled)
#### lets do the selection of columns and scaling for ours:
#select a subset of the variables
cluster_dat <- hbsc2014 %>%
drop_na(c("sweets", "ondiet", "vegetables", "fruits","COUNTRYno")) %>%
mutate(country_number = as.numeric(as.factor(COUNTRYno))) %>%
select(sweets, ondiet, country_number, vegetables, fruits) %>%
### lets now scale it:
mutate(fruits = scale(fruits),
sweets = scale(sweets),
ondiet = scale(ondiet),
vegetables = scale(vegetables))
head(cluster)
head(cluster_dat)
km.res <- kmeans(cluster_dat, 3, nstart = 10)
km.variables <- kmeans(cluster_dat, 3, nstart = 10)
iris[, -5]
#### lets do the selection of columns and scaling for ours:
#select a subset of the variables
cluster_dat <- hbsc2014 %>%
drop_na(c("sweets", "ondiet", "vegetables", "fruits")) %>%
#mutate(country_number = as.numeric(as.factor(COUNTRYno))) %>%  ## lets leave out country for a sec
select(sweets, ondiet, country_number, vegetables, fruits) %>%
### lets now scale it:
mutate(fruits = scale(fruits),
sweets = scale(sweets),
ondiet = scale(ondiet),
vegetables = scale(vegetables))
head(cluster_dat)
#### lets do the selection of columns and scaling for ours:
#select a subset of the variables
cluster_dat <- hbsc2014 %>%
drop_na(c("sweets", "ondiet", "vegetables", "fruits")) %>%
#mutate(country_number = as.numeric(as.factor(COUNTRYno))) %>%  ## lets leave out country for a sec
select(sweets, ondiet, country_number, vegetables, fruits) %>%
### lets now scale it:
mutate(fruits = scale(fruits),
sweets = scale(sweets),
ondiet = scale(ondiet),
vegetables = scale(vegetables))
#### lets do the selection of columns and scaling for ours:
#select a subset of the variables
cluster_dat <- hbsc2014 %>%
drop_na(c("sweets", "ondiet", "vegetables", "fruits")) %>%
#mutate(country_number = as.numeric(as.factor(COUNTRYno))) %>%  ## lets leave out country for a sec
select(sweets, ondiet, vegetables, fruits) %>%
### lets now scale it:
mutate(fruits = scale(fruits),
sweets = scale(sweets),
ondiet = scale(ondiet),
vegetables = scale(vegetables))
head(cluster_dat)
km.variables <- kmeans(cluster_dat, 3, nstart = 10)
fviz_cluster(km.variables, cluster_dat, ellipse.type = "norm")
fviz_nbclust(cluster_dat, kmeans, method = "silhouette",  k.max = 10)
